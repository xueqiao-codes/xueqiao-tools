/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.aliyun.resource.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 托管机机器实体的描述
 */
public class EcsInstance implements org.apache.thrift.TBase<EcsInstance, EcsInstance._Fields>, java.io.Serializable, Cloneable, Comparable<EcsInstance> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EcsInstance");

  private static final org.apache.thrift.protocol.TField ALIYUN_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("aliyunInstanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regionId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTANCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ALIYUN_EXPIRED_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("aliyunExpiredTimestamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ZONE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INSTANCE_NETWORK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceNetworkType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField INSTANCE_CHARGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceChargeType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField INNER_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("innerIpAddress", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PUBLIC_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("publicIpAddress", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RUNNING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("runningStatus", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MACHINE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("machineSpec", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EcsInstanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EcsInstanceTupleSchemeFactory());
  }

  public String aliyunInstanceId; // optional
  public String regionId; // optional
  public String instanceName; // optional
  public long aliyunExpiredTimestamp; // optional
  public String zoneId; // optional
  /**
   * 
   * @see InstanceNetworkType
   */
  public InstanceNetworkType instanceNetworkType; // optional
  /**
   * 
   * @see InstanceChargeType
   */
  public InstanceChargeType instanceChargeType; // optional
  public Map<String,String> tags; // optional
  public String innerIpAddress; // optional
  public String publicIpAddress; // optional
  /**
   * 
   * @see xueqiao.hosting.machine.HostingMachineRunningStatus
   */
  public xueqiao.hosting.machine.HostingMachineRunningStatus runningStatus; // optional
  public xueqiao.hosting.machine.HostingMachineSpec machineSpec; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALIYUN_INSTANCE_ID((short)1, "aliyunInstanceId"),
    REGION_ID((short)2, "regionId"),
    INSTANCE_NAME((short)3, "instanceName"),
    ALIYUN_EXPIRED_TIMESTAMP((short)4, "aliyunExpiredTimestamp"),
    ZONE_ID((short)5, "zoneId"),
    /**
     * 
     * @see InstanceNetworkType
     */
    INSTANCE_NETWORK_TYPE((short)6, "instanceNetworkType"),
    /**
     * 
     * @see InstanceChargeType
     */
    INSTANCE_CHARGE_TYPE((short)7, "instanceChargeType"),
    TAGS((short)8, "tags"),
    INNER_IP_ADDRESS((short)9, "innerIpAddress"),
    PUBLIC_IP_ADDRESS((short)10, "publicIpAddress"),
    /**
     * 
     * @see xueqiao.hosting.machine.HostingMachineRunningStatus
     */
    RUNNING_STATUS((short)11, "runningStatus"),
    MACHINE_SPEC((short)13, "machineSpec");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALIYUN_INSTANCE_ID
          return ALIYUN_INSTANCE_ID;
        case 2: // REGION_ID
          return REGION_ID;
        case 3: // INSTANCE_NAME
          return INSTANCE_NAME;
        case 4: // ALIYUN_EXPIRED_TIMESTAMP
          return ALIYUN_EXPIRED_TIMESTAMP;
        case 5: // ZONE_ID
          return ZONE_ID;
        case 6: // INSTANCE_NETWORK_TYPE
          return INSTANCE_NETWORK_TYPE;
        case 7: // INSTANCE_CHARGE_TYPE
          return INSTANCE_CHARGE_TYPE;
        case 8: // TAGS
          return TAGS;
        case 9: // INNER_IP_ADDRESS
          return INNER_IP_ADDRESS;
        case 10: // PUBLIC_IP_ADDRESS
          return PUBLIC_IP_ADDRESS;
        case 11: // RUNNING_STATUS
          return RUNNING_STATUS;
        case 13: // MACHINE_SPEC
          return MACHINE_SPEC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALIYUNEXPIREDTIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ALIYUN_INSTANCE_ID,_Fields.REGION_ID,_Fields.INSTANCE_NAME,_Fields.ALIYUN_EXPIRED_TIMESTAMP,_Fields.ZONE_ID,_Fields.INSTANCE_NETWORK_TYPE,_Fields.INSTANCE_CHARGE_TYPE,_Fields.TAGS,_Fields.INNER_IP_ADDRESS,_Fields.PUBLIC_IP_ADDRESS,_Fields.RUNNING_STATUS,_Fields.MACHINE_SPEC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALIYUN_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("aliyunInstanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_ID, new org.apache.thrift.meta_data.FieldMetaData("regionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("instanceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIYUN_EXPIRED_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("aliyunExpiredTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ZONE_ID, new org.apache.thrift.meta_data.FieldMetaData("zoneId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE_NETWORK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("instanceNetworkType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, InstanceNetworkType.class)));
    tmpMap.put(_Fields.INSTANCE_CHARGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("instanceChargeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, InstanceChargeType.class)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INNER_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("innerIpAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("publicIpAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUNNING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("runningStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.hosting.machine.HostingMachineRunningStatus.class)));
    tmpMap.put(_Fields.MACHINE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("machineSpec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.hosting.machine.HostingMachineSpec.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EcsInstance.class, metaDataMap);
  }

  public EcsInstance() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EcsInstance(EcsInstance other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAliyunInstanceId()) {
      this.aliyunInstanceId = other.aliyunInstanceId;
    }
    if (other.isSetRegionId()) {
      this.regionId = other.regionId;
    }
    if (other.isSetInstanceName()) {
      this.instanceName = other.instanceName;
    }
    this.aliyunExpiredTimestamp = other.aliyunExpiredTimestamp;
    if (other.isSetZoneId()) {
      this.zoneId = other.zoneId;
    }
    if (other.isSetInstanceNetworkType()) {
      this.instanceNetworkType = other.instanceNetworkType;
    }
    if (other.isSetInstanceChargeType()) {
      this.instanceChargeType = other.instanceChargeType;
    }
    if (other.isSetTags()) {
      Map<String,String> __this__tags = new HashMap<String,String>(other.tags);
      this.tags = __this__tags;
    }
    if (other.isSetInnerIpAddress()) {
      this.innerIpAddress = other.innerIpAddress;
    }
    if (other.isSetPublicIpAddress()) {
      this.publicIpAddress = other.publicIpAddress;
    }
    if (other.isSetRunningStatus()) {
      this.runningStatus = other.runningStatus;
    }
    if (other.isSetMachineSpec()) {
      this.machineSpec = new xueqiao.hosting.machine.HostingMachineSpec(other.machineSpec);
    }
  }

  public EcsInstance deepCopy() {
    return new EcsInstance(this);
  }

  @Override
  public void clear() {
    this.aliyunInstanceId = null;
    this.regionId = null;
    this.instanceName = null;
    setAliyunExpiredTimestampIsSet(false);
    this.aliyunExpiredTimestamp = 0;
    this.zoneId = null;
    this.instanceNetworkType = null;
    this.instanceChargeType = null;
    this.tags = null;
    this.innerIpAddress = null;
    this.publicIpAddress = null;
    this.runningStatus = null;
    this.machineSpec = null;
  }

  public String getAliyunInstanceId() {
    return this.aliyunInstanceId;
  }

  public EcsInstance setAliyunInstanceId(String aliyunInstanceId) {
    this.aliyunInstanceId = aliyunInstanceId;
    return this;
  }

  public void unsetAliyunInstanceId() {
    this.aliyunInstanceId = null;
  }

  /** Returns true if field aliyunInstanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetAliyunInstanceId() {
    return this.aliyunInstanceId != null;
  }

  public void setAliyunInstanceIdIsSet(boolean value) {
    if (!value) {
      this.aliyunInstanceId = null;
    }
  }

  public String getRegionId() {
    return this.regionId;
  }

  public EcsInstance setRegionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

  public void unsetRegionId() {
    this.regionId = null;
  }

  /** Returns true if field regionId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionId() {
    return this.regionId != null;
  }

  public void setRegionIdIsSet(boolean value) {
    if (!value) {
      this.regionId = null;
    }
  }

  public String getInstanceName() {
    return this.instanceName;
  }

  public EcsInstance setInstanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  public void unsetInstanceName() {
    this.instanceName = null;
  }

  /** Returns true if field instanceName is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceName() {
    return this.instanceName != null;
  }

  public void setInstanceNameIsSet(boolean value) {
    if (!value) {
      this.instanceName = null;
    }
  }

  public long getAliyunExpiredTimestamp() {
    return this.aliyunExpiredTimestamp;
  }

  public EcsInstance setAliyunExpiredTimestamp(long aliyunExpiredTimestamp) {
    this.aliyunExpiredTimestamp = aliyunExpiredTimestamp;
    setAliyunExpiredTimestampIsSet(true);
    return this;
  }

  public void unsetAliyunExpiredTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALIYUNEXPIREDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field aliyunExpiredTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetAliyunExpiredTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ALIYUNEXPIREDTIMESTAMP_ISSET_ID);
  }

  public void setAliyunExpiredTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALIYUNEXPIREDTIMESTAMP_ISSET_ID, value);
  }

  public String getZoneId() {
    return this.zoneId;
  }

  public EcsInstance setZoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  public void unsetZoneId() {
    this.zoneId = null;
  }

  /** Returns true if field zoneId is set (has been assigned a value) and false otherwise */
  public boolean isSetZoneId() {
    return this.zoneId != null;
  }

  public void setZoneIdIsSet(boolean value) {
    if (!value) {
      this.zoneId = null;
    }
  }

  /**
   * 
   * @see InstanceNetworkType
   */
  public InstanceNetworkType getInstanceNetworkType() {
    return this.instanceNetworkType;
  }

  /**
   * 
   * @see InstanceNetworkType
   */
  public EcsInstance setInstanceNetworkType(InstanceNetworkType instanceNetworkType) {
    this.instanceNetworkType = instanceNetworkType;
    return this;
  }

  public void unsetInstanceNetworkType() {
    this.instanceNetworkType = null;
  }

  /** Returns true if field instanceNetworkType is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceNetworkType() {
    return this.instanceNetworkType != null;
  }

  public void setInstanceNetworkTypeIsSet(boolean value) {
    if (!value) {
      this.instanceNetworkType = null;
    }
  }

  /**
   * 
   * @see InstanceChargeType
   */
  public InstanceChargeType getInstanceChargeType() {
    return this.instanceChargeType;
  }

  /**
   * 
   * @see InstanceChargeType
   */
  public EcsInstance setInstanceChargeType(InstanceChargeType instanceChargeType) {
    this.instanceChargeType = instanceChargeType;
    return this;
  }

  public void unsetInstanceChargeType() {
    this.instanceChargeType = null;
  }

  /** Returns true if field instanceChargeType is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceChargeType() {
    return this.instanceChargeType != null;
  }

  public void setInstanceChargeTypeIsSet(boolean value) {
    if (!value) {
      this.instanceChargeType = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public void putToTags(String key, String val) {
    if (this.tags == null) {
      this.tags = new HashMap<String,String>();
    }
    this.tags.put(key, val);
  }

  public Map<String,String> getTags() {
    return this.tags;
  }

  public EcsInstance setTags(Map<String,String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getInnerIpAddress() {
    return this.innerIpAddress;
  }

  public EcsInstance setInnerIpAddress(String innerIpAddress) {
    this.innerIpAddress = innerIpAddress;
    return this;
  }

  public void unsetInnerIpAddress() {
    this.innerIpAddress = null;
  }

  /** Returns true if field innerIpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerIpAddress() {
    return this.innerIpAddress != null;
  }

  public void setInnerIpAddressIsSet(boolean value) {
    if (!value) {
      this.innerIpAddress = null;
    }
  }

  public String getPublicIpAddress() {
    return this.publicIpAddress;
  }

  public EcsInstance setPublicIpAddress(String publicIpAddress) {
    this.publicIpAddress = publicIpAddress;
    return this;
  }

  public void unsetPublicIpAddress() {
    this.publicIpAddress = null;
  }

  /** Returns true if field publicIpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicIpAddress() {
    return this.publicIpAddress != null;
  }

  public void setPublicIpAddressIsSet(boolean value) {
    if (!value) {
      this.publicIpAddress = null;
    }
  }

  /**
   * 
   * @see xueqiao.hosting.machine.HostingMachineRunningStatus
   */
  public xueqiao.hosting.machine.HostingMachineRunningStatus getRunningStatus() {
    return this.runningStatus;
  }

  /**
   * 
   * @see xueqiao.hosting.machine.HostingMachineRunningStatus
   */
  public EcsInstance setRunningStatus(xueqiao.hosting.machine.HostingMachineRunningStatus runningStatus) {
    this.runningStatus = runningStatus;
    return this;
  }

  public void unsetRunningStatus() {
    this.runningStatus = null;
  }

  /** Returns true if field runningStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRunningStatus() {
    return this.runningStatus != null;
  }

  public void setRunningStatusIsSet(boolean value) {
    if (!value) {
      this.runningStatus = null;
    }
  }

  public xueqiao.hosting.machine.HostingMachineSpec getMachineSpec() {
    return this.machineSpec;
  }

  public EcsInstance setMachineSpec(xueqiao.hosting.machine.HostingMachineSpec machineSpec) {
    this.machineSpec = machineSpec;
    return this;
  }

  public void unsetMachineSpec() {
    this.machineSpec = null;
  }

  /** Returns true if field machineSpec is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineSpec() {
    return this.machineSpec != null;
  }

  public void setMachineSpecIsSet(boolean value) {
    if (!value) {
      this.machineSpec = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALIYUN_INSTANCE_ID:
      if (value == null) {
        unsetAliyunInstanceId();
      } else {
        setAliyunInstanceId((String)value);
      }
      break;

    case REGION_ID:
      if (value == null) {
        unsetRegionId();
      } else {
        setRegionId((String)value);
      }
      break;

    case INSTANCE_NAME:
      if (value == null) {
        unsetInstanceName();
      } else {
        setInstanceName((String)value);
      }
      break;

    case ALIYUN_EXPIRED_TIMESTAMP:
      if (value == null) {
        unsetAliyunExpiredTimestamp();
      } else {
        setAliyunExpiredTimestamp((Long)value);
      }
      break;

    case ZONE_ID:
      if (value == null) {
        unsetZoneId();
      } else {
        setZoneId((String)value);
      }
      break;

    case INSTANCE_NETWORK_TYPE:
      if (value == null) {
        unsetInstanceNetworkType();
      } else {
        setInstanceNetworkType((InstanceNetworkType)value);
      }
      break;

    case INSTANCE_CHARGE_TYPE:
      if (value == null) {
        unsetInstanceChargeType();
      } else {
        setInstanceChargeType((InstanceChargeType)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Map<String,String>)value);
      }
      break;

    case INNER_IP_ADDRESS:
      if (value == null) {
        unsetInnerIpAddress();
      } else {
        setInnerIpAddress((String)value);
      }
      break;

    case PUBLIC_IP_ADDRESS:
      if (value == null) {
        unsetPublicIpAddress();
      } else {
        setPublicIpAddress((String)value);
      }
      break;

    case RUNNING_STATUS:
      if (value == null) {
        unsetRunningStatus();
      } else {
        setRunningStatus((xueqiao.hosting.machine.HostingMachineRunningStatus)value);
      }
      break;

    case MACHINE_SPEC:
      if (value == null) {
        unsetMachineSpec();
      } else {
        setMachineSpec((xueqiao.hosting.machine.HostingMachineSpec)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALIYUN_INSTANCE_ID:
      return getAliyunInstanceId();

    case REGION_ID:
      return getRegionId();

    case INSTANCE_NAME:
      return getInstanceName();

    case ALIYUN_EXPIRED_TIMESTAMP:
      return Long.valueOf(getAliyunExpiredTimestamp());

    case ZONE_ID:
      return getZoneId();

    case INSTANCE_NETWORK_TYPE:
      return getInstanceNetworkType();

    case INSTANCE_CHARGE_TYPE:
      return getInstanceChargeType();

    case TAGS:
      return getTags();

    case INNER_IP_ADDRESS:
      return getInnerIpAddress();

    case PUBLIC_IP_ADDRESS:
      return getPublicIpAddress();

    case RUNNING_STATUS:
      return getRunningStatus();

    case MACHINE_SPEC:
      return getMachineSpec();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALIYUN_INSTANCE_ID:
      return isSetAliyunInstanceId();
    case REGION_ID:
      return isSetRegionId();
    case INSTANCE_NAME:
      return isSetInstanceName();
    case ALIYUN_EXPIRED_TIMESTAMP:
      return isSetAliyunExpiredTimestamp();
    case ZONE_ID:
      return isSetZoneId();
    case INSTANCE_NETWORK_TYPE:
      return isSetInstanceNetworkType();
    case INSTANCE_CHARGE_TYPE:
      return isSetInstanceChargeType();
    case TAGS:
      return isSetTags();
    case INNER_IP_ADDRESS:
      return isSetInnerIpAddress();
    case PUBLIC_IP_ADDRESS:
      return isSetPublicIpAddress();
    case RUNNING_STATUS:
      return isSetRunningStatus();
    case MACHINE_SPEC:
      return isSetMachineSpec();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EcsInstance)
      return this.equals((EcsInstance)that);
    return false;
  }

  public boolean equals(EcsInstance that) {
    if (that == null)
      return false;

    boolean this_present_aliyunInstanceId = true && this.isSetAliyunInstanceId();
    boolean that_present_aliyunInstanceId = true && that.isSetAliyunInstanceId();
    if (this_present_aliyunInstanceId || that_present_aliyunInstanceId) {
      if (!(this_present_aliyunInstanceId && that_present_aliyunInstanceId))
        return false;
      if (!this.aliyunInstanceId.equals(that.aliyunInstanceId))
        return false;
    }

    boolean this_present_regionId = true && this.isSetRegionId();
    boolean that_present_regionId = true && that.isSetRegionId();
    if (this_present_regionId || that_present_regionId) {
      if (!(this_present_regionId && that_present_regionId))
        return false;
      if (!this.regionId.equals(that.regionId))
        return false;
    }

    boolean this_present_instanceName = true && this.isSetInstanceName();
    boolean that_present_instanceName = true && that.isSetInstanceName();
    if (this_present_instanceName || that_present_instanceName) {
      if (!(this_present_instanceName && that_present_instanceName))
        return false;
      if (!this.instanceName.equals(that.instanceName))
        return false;
    }

    boolean this_present_aliyunExpiredTimestamp = true && this.isSetAliyunExpiredTimestamp();
    boolean that_present_aliyunExpiredTimestamp = true && that.isSetAliyunExpiredTimestamp();
    if (this_present_aliyunExpiredTimestamp || that_present_aliyunExpiredTimestamp) {
      if (!(this_present_aliyunExpiredTimestamp && that_present_aliyunExpiredTimestamp))
        return false;
      if (this.aliyunExpiredTimestamp != that.aliyunExpiredTimestamp)
        return false;
    }

    boolean this_present_zoneId = true && this.isSetZoneId();
    boolean that_present_zoneId = true && that.isSetZoneId();
    if (this_present_zoneId || that_present_zoneId) {
      if (!(this_present_zoneId && that_present_zoneId))
        return false;
      if (!this.zoneId.equals(that.zoneId))
        return false;
    }

    boolean this_present_instanceNetworkType = true && this.isSetInstanceNetworkType();
    boolean that_present_instanceNetworkType = true && that.isSetInstanceNetworkType();
    if (this_present_instanceNetworkType || that_present_instanceNetworkType) {
      if (!(this_present_instanceNetworkType && that_present_instanceNetworkType))
        return false;
      if (!this.instanceNetworkType.equals(that.instanceNetworkType))
        return false;
    }

    boolean this_present_instanceChargeType = true && this.isSetInstanceChargeType();
    boolean that_present_instanceChargeType = true && that.isSetInstanceChargeType();
    if (this_present_instanceChargeType || that_present_instanceChargeType) {
      if (!(this_present_instanceChargeType && that_present_instanceChargeType))
        return false;
      if (!this.instanceChargeType.equals(that.instanceChargeType))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_innerIpAddress = true && this.isSetInnerIpAddress();
    boolean that_present_innerIpAddress = true && that.isSetInnerIpAddress();
    if (this_present_innerIpAddress || that_present_innerIpAddress) {
      if (!(this_present_innerIpAddress && that_present_innerIpAddress))
        return false;
      if (!this.innerIpAddress.equals(that.innerIpAddress))
        return false;
    }

    boolean this_present_publicIpAddress = true && this.isSetPublicIpAddress();
    boolean that_present_publicIpAddress = true && that.isSetPublicIpAddress();
    if (this_present_publicIpAddress || that_present_publicIpAddress) {
      if (!(this_present_publicIpAddress && that_present_publicIpAddress))
        return false;
      if (!this.publicIpAddress.equals(that.publicIpAddress))
        return false;
    }

    boolean this_present_runningStatus = true && this.isSetRunningStatus();
    boolean that_present_runningStatus = true && that.isSetRunningStatus();
    if (this_present_runningStatus || that_present_runningStatus) {
      if (!(this_present_runningStatus && that_present_runningStatus))
        return false;
      if (!this.runningStatus.equals(that.runningStatus))
        return false;
    }

    boolean this_present_machineSpec = true && this.isSetMachineSpec();
    boolean that_present_machineSpec = true && that.isSetMachineSpec();
    if (this_present_machineSpec || that_present_machineSpec) {
      if (!(this_present_machineSpec && that_present_machineSpec))
        return false;
      if (!this.machineSpec.equals(that.machineSpec))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EcsInstance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAliyunInstanceId()).compareTo(other.isSetAliyunInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAliyunInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliyunInstanceId, other.aliyunInstanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionId()).compareTo(other.isSetRegionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionId, other.regionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceName()).compareTo(other.isSetInstanceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceName, other.instanceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAliyunExpiredTimestamp()).compareTo(other.isSetAliyunExpiredTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAliyunExpiredTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliyunExpiredTimestamp, other.aliyunExpiredTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZoneId()).compareTo(other.isSetZoneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZoneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneId, other.zoneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceNetworkType()).compareTo(other.isSetInstanceNetworkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceNetworkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceNetworkType, other.instanceNetworkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceChargeType()).compareTo(other.isSetInstanceChargeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceChargeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceChargeType, other.instanceChargeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerIpAddress()).compareTo(other.isSetInnerIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerIpAddress, other.innerIpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicIpAddress()).compareTo(other.isSetPublicIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicIpAddress, other.publicIpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunningStatus()).compareTo(other.isSetRunningStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunningStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runningStatus, other.runningStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineSpec()).compareTo(other.isSetMachineSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineSpec, other.machineSpec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EcsInstance(");
    boolean first = true;

    if (isSetAliyunInstanceId()) {
      sb.append("aliyunInstanceId:");
      if (this.aliyunInstanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.aliyunInstanceId);
      }
      first = false;
    }
    if (isSetRegionId()) {
      if (!first) sb.append(", ");
      sb.append("regionId:");
      if (this.regionId == null) {
        sb.append("null");
      } else {
        sb.append(this.regionId);
      }
      first = false;
    }
    if (isSetInstanceName()) {
      if (!first) sb.append(", ");
      sb.append("instanceName:");
      if (this.instanceName == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceName);
      }
      first = false;
    }
    if (isSetAliyunExpiredTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("aliyunExpiredTimestamp:");
      sb.append(this.aliyunExpiredTimestamp);
      first = false;
    }
    if (isSetZoneId()) {
      if (!first) sb.append(", ");
      sb.append("zoneId:");
      if (this.zoneId == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneId);
      }
      first = false;
    }
    if (isSetInstanceNetworkType()) {
      if (!first) sb.append(", ");
      sb.append("instanceNetworkType:");
      if (this.instanceNetworkType == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceNetworkType);
      }
      first = false;
    }
    if (isSetInstanceChargeType()) {
      if (!first) sb.append(", ");
      sb.append("instanceChargeType:");
      if (this.instanceChargeType == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceChargeType);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetInnerIpAddress()) {
      if (!first) sb.append(", ");
      sb.append("innerIpAddress:");
      if (this.innerIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.innerIpAddress);
      }
      first = false;
    }
    if (isSetPublicIpAddress()) {
      if (!first) sb.append(", ");
      sb.append("publicIpAddress:");
      if (this.publicIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.publicIpAddress);
      }
      first = false;
    }
    if (isSetRunningStatus()) {
      if (!first) sb.append(", ");
      sb.append("runningStatus:");
      if (this.runningStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.runningStatus);
      }
      first = false;
    }
    if (isSetMachineSpec()) {
      if (!first) sb.append(", ");
      sb.append("machineSpec:");
      if (this.machineSpec == null) {
        sb.append("null");
      } else {
        sb.append(this.machineSpec);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (machineSpec != null) {
      machineSpec.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EcsInstanceStandardSchemeFactory implements SchemeFactory {
    public EcsInstanceStandardScheme getScheme() {
      return new EcsInstanceStandardScheme();
    }
  }

  private static class EcsInstanceStandardScheme extends StandardScheme<EcsInstance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EcsInstance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALIYUN_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aliyunInstanceId = iprot.readString();
              struct.setAliyunInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionId = iprot.readString();
              struct.setRegionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTANCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceName = iprot.readString();
              struct.setInstanceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALIYUN_EXPIRED_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.aliyunExpiredTimestamp = iprot.readI64();
              struct.setAliyunExpiredTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ZONE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zoneId = iprot.readString();
              struct.setZoneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INSTANCE_NETWORK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.instanceNetworkType = InstanceNetworkType.findByValue(iprot.readI32());
              struct.setInstanceNetworkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INSTANCE_CHARGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.instanceChargeType = InstanceChargeType.findByValue(iprot.readI32());
              struct.setInstanceChargeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.tags = new HashMap<String,String>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  String _key12;
                  String _val13;
                  _key12 = iprot.readString();
                  _val13 = iprot.readString();
                  struct.tags.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INNER_IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.innerIpAddress = iprot.readString();
              struct.setInnerIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PUBLIC_IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicIpAddress = iprot.readString();
              struct.setPublicIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RUNNING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runningStatus = xueqiao.hosting.machine.HostingMachineRunningStatus.findByValue(iprot.readI32());
              struct.setRunningStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MACHINE_SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.machineSpec = new xueqiao.hosting.machine.HostingMachineSpec();
              struct.machineSpec.read(iprot);
              struct.setMachineSpecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EcsInstance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.aliyunInstanceId != null) {
        if (struct.isSetAliyunInstanceId()) {
          oprot.writeFieldBegin(ALIYUN_INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.aliyunInstanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.regionId != null) {
        if (struct.isSetRegionId()) {
          oprot.writeFieldBegin(REGION_ID_FIELD_DESC);
          oprot.writeString(struct.regionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceName != null) {
        if (struct.isSetInstanceName()) {
          oprot.writeFieldBegin(INSTANCE_NAME_FIELD_DESC);
          oprot.writeString(struct.instanceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAliyunExpiredTimestamp()) {
        oprot.writeFieldBegin(ALIYUN_EXPIRED_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.aliyunExpiredTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.zoneId != null) {
        if (struct.isSetZoneId()) {
          oprot.writeFieldBegin(ZONE_ID_FIELD_DESC);
          oprot.writeString(struct.zoneId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceNetworkType != null) {
        if (struct.isSetInstanceNetworkType()) {
          oprot.writeFieldBegin(INSTANCE_NETWORK_TYPE_FIELD_DESC);
          oprot.writeI32(struct.instanceNetworkType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceChargeType != null) {
        if (struct.isSetInstanceChargeType()) {
          oprot.writeFieldBegin(INSTANCE_CHARGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.instanceChargeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (Map.Entry<String, String> _iter14 : struct.tags.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.innerIpAddress != null) {
        if (struct.isSetInnerIpAddress()) {
          oprot.writeFieldBegin(INNER_IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.innerIpAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publicIpAddress != null) {
        if (struct.isSetPublicIpAddress()) {
          oprot.writeFieldBegin(PUBLIC_IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.publicIpAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.runningStatus != null) {
        if (struct.isSetRunningStatus()) {
          oprot.writeFieldBegin(RUNNING_STATUS_FIELD_DESC);
          oprot.writeI32(struct.runningStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineSpec != null) {
        if (struct.isSetMachineSpec()) {
          oprot.writeFieldBegin(MACHINE_SPEC_FIELD_DESC);
          struct.machineSpec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EcsInstanceTupleSchemeFactory implements SchemeFactory {
    public EcsInstanceTupleScheme getScheme() {
      return new EcsInstanceTupleScheme();
    }
  }

  private static class EcsInstanceTupleScheme extends TupleScheme<EcsInstance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EcsInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAliyunInstanceId()) {
        optionals.set(0);
      }
      if (struct.isSetRegionId()) {
        optionals.set(1);
      }
      if (struct.isSetInstanceName()) {
        optionals.set(2);
      }
      if (struct.isSetAliyunExpiredTimestamp()) {
        optionals.set(3);
      }
      if (struct.isSetZoneId()) {
        optionals.set(4);
      }
      if (struct.isSetInstanceNetworkType()) {
        optionals.set(5);
      }
      if (struct.isSetInstanceChargeType()) {
        optionals.set(6);
      }
      if (struct.isSetTags()) {
        optionals.set(7);
      }
      if (struct.isSetInnerIpAddress()) {
        optionals.set(8);
      }
      if (struct.isSetPublicIpAddress()) {
        optionals.set(9);
      }
      if (struct.isSetRunningStatus()) {
        optionals.set(10);
      }
      if (struct.isSetMachineSpec()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetAliyunInstanceId()) {
        oprot.writeString(struct.aliyunInstanceId);
      }
      if (struct.isSetRegionId()) {
        oprot.writeString(struct.regionId);
      }
      if (struct.isSetInstanceName()) {
        oprot.writeString(struct.instanceName);
      }
      if (struct.isSetAliyunExpiredTimestamp()) {
        oprot.writeI64(struct.aliyunExpiredTimestamp);
      }
      if (struct.isSetZoneId()) {
        oprot.writeString(struct.zoneId);
      }
      if (struct.isSetInstanceNetworkType()) {
        oprot.writeI32(struct.instanceNetworkType.getValue());
      }
      if (struct.isSetInstanceChargeType()) {
        oprot.writeI32(struct.instanceChargeType.getValue());
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (Map.Entry<String, String> _iter15 : struct.tags.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
      if (struct.isSetInnerIpAddress()) {
        oprot.writeString(struct.innerIpAddress);
      }
      if (struct.isSetPublicIpAddress()) {
        oprot.writeString(struct.publicIpAddress);
      }
      if (struct.isSetRunningStatus()) {
        oprot.writeI32(struct.runningStatus.getValue());
      }
      if (struct.isSetMachineSpec()) {
        struct.machineSpec.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EcsInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.aliyunInstanceId = iprot.readString();
        struct.setAliyunInstanceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.regionId = iprot.readString();
        struct.setRegionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instanceName = iprot.readString();
        struct.setInstanceNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.aliyunExpiredTimestamp = iprot.readI64();
        struct.setAliyunExpiredTimestampIsSet(true);
      }
      if (incoming.get(4)) {
        struct.zoneId = iprot.readString();
        struct.setZoneIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.instanceNetworkType = InstanceNetworkType.findByValue(iprot.readI32());
        struct.setInstanceNetworkTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.instanceChargeType = InstanceChargeType.findByValue(iprot.readI32());
        struct.setInstanceChargeTypeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new HashMap<String,String>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18;
            String _val19;
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            struct.tags.put(_key18, _val19);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.innerIpAddress = iprot.readString();
        struct.setInnerIpAddressIsSet(true);
      }
      if (incoming.get(9)) {
        struct.publicIpAddress = iprot.readString();
        struct.setPublicIpAddressIsSet(true);
      }
      if (incoming.get(10)) {
        struct.runningStatus = xueqiao.hosting.machine.HostingMachineRunningStatus.findByValue(iprot.readI32());
        struct.setRunningStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.machineSpec = new xueqiao.hosting.machine.HostingMachineSpec();
        struct.machineSpec.read(iprot);
        struct.setMachineSpecIsSet(true);
      }
    }
  }

}

