/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.aliyun.resource.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResourceTag implements org.apache.thrift.TBase<ResourceTag, ResourceTag._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceTag> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceTag");

  private static final org.apache.thrift.protocol.TField TAG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIndex", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("tagKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TAG_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("tagValue", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regionId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResourceTagStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResourceTagTupleSchemeFactory());
  }

  public int tagIndex; // optional
  public String tagKey; // optional
  public String tagValue; // optional
  public String regionId; // optional
  /**
   * 
   * @see ResourceType
   */
  public ResourceType resourceType; // optional
  public String resourceId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TAG_INDEX((short)1, "tagIndex"),
    TAG_KEY((short)2, "tagKey"),
    TAG_VALUE((short)3, "tagValue"),
    REGION_ID((short)4, "regionId"),
    /**
     * 
     * @see ResourceType
     */
    RESOURCE_TYPE((short)5, "resourceType"),
    RESOURCE_ID((short)6, "resourceId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TAG_INDEX
          return TAG_INDEX;
        case 2: // TAG_KEY
          return TAG_KEY;
        case 3: // TAG_VALUE
          return TAG_VALUE;
        case 4: // REGION_ID
          return REGION_ID;
        case 5: // RESOURCE_TYPE
          return RESOURCE_TYPE;
        case 6: // RESOURCE_ID
          return RESOURCE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TAGINDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TAG_INDEX,_Fields.TAG_KEY,_Fields.TAG_VALUE,_Fields.REGION_ID,_Fields.RESOURCE_TYPE,_Fields.RESOURCE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TAG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("tagIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG_KEY, new org.apache.thrift.meta_data.FieldMetaData("tagKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_VALUE, new org.apache.thrift.meta_data.FieldMetaData("tagValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_ID, new org.apache.thrift.meta_data.FieldMetaData("regionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResourceType.class)));
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceTag.class, metaDataMap);
  }

  public ResourceTag() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResourceTag(ResourceTag other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tagIndex = other.tagIndex;
    if (other.isSetTagKey()) {
      this.tagKey = other.tagKey;
    }
    if (other.isSetTagValue()) {
      this.tagValue = other.tagValue;
    }
    if (other.isSetRegionId()) {
      this.regionId = other.regionId;
    }
    if (other.isSetResourceType()) {
      this.resourceType = other.resourceType;
    }
    if (other.isSetResourceId()) {
      this.resourceId = other.resourceId;
    }
  }

  public ResourceTag deepCopy() {
    return new ResourceTag(this);
  }

  @Override
  public void clear() {
    setTagIndexIsSet(false);
    this.tagIndex = 0;
    this.tagKey = null;
    this.tagValue = null;
    this.regionId = null;
    this.resourceType = null;
    this.resourceId = null;
  }

  public int getTagIndex() {
    return this.tagIndex;
  }

  public ResourceTag setTagIndex(int tagIndex) {
    this.tagIndex = tagIndex;
    setTagIndexIsSet(true);
    return this;
  }

  public void unsetTagIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGINDEX_ISSET_ID);
  }

  /** Returns true if field tagIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __TAGINDEX_ISSET_ID);
  }

  public void setTagIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGINDEX_ISSET_ID, value);
  }

  public String getTagKey() {
    return this.tagKey;
  }

  public ResourceTag setTagKey(String tagKey) {
    this.tagKey = tagKey;
    return this;
  }

  public void unsetTagKey() {
    this.tagKey = null;
  }

  /** Returns true if field tagKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTagKey() {
    return this.tagKey != null;
  }

  public void setTagKeyIsSet(boolean value) {
    if (!value) {
      this.tagKey = null;
    }
  }

  public String getTagValue() {
    return this.tagValue;
  }

  public ResourceTag setTagValue(String tagValue) {
    this.tagValue = tagValue;
    return this;
  }

  public void unsetTagValue() {
    this.tagValue = null;
  }

  /** Returns true if field tagValue is set (has been assigned a value) and false otherwise */
  public boolean isSetTagValue() {
    return this.tagValue != null;
  }

  public void setTagValueIsSet(boolean value) {
    if (!value) {
      this.tagValue = null;
    }
  }

  public String getRegionId() {
    return this.regionId;
  }

  public ResourceTag setRegionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

  public void unsetRegionId() {
    this.regionId = null;
  }

  /** Returns true if field regionId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionId() {
    return this.regionId != null;
  }

  public void setRegionIdIsSet(boolean value) {
    if (!value) {
      this.regionId = null;
    }
  }

  /**
   * 
   * @see ResourceType
   */
  public ResourceType getResourceType() {
    return this.resourceType;
  }

  /**
   * 
   * @see ResourceType
   */
  public ResourceTag setResourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  public void unsetResourceType() {
    this.resourceType = null;
  }

  /** Returns true if field resourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceType() {
    return this.resourceType != null;
  }

  public void setResourceTypeIsSet(boolean value) {
    if (!value) {
      this.resourceType = null;
    }
  }

  public String getResourceId() {
    return this.resourceId;
  }

  public ResourceTag setResourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  public void unsetResourceId() {
    this.resourceId = null;
  }

  /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceId() {
    return this.resourceId != null;
  }

  public void setResourceIdIsSet(boolean value) {
    if (!value) {
      this.resourceId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TAG_INDEX:
      if (value == null) {
        unsetTagIndex();
      } else {
        setTagIndex((Integer)value);
      }
      break;

    case TAG_KEY:
      if (value == null) {
        unsetTagKey();
      } else {
        setTagKey((String)value);
      }
      break;

    case TAG_VALUE:
      if (value == null) {
        unsetTagValue();
      } else {
        setTagValue((String)value);
      }
      break;

    case REGION_ID:
      if (value == null) {
        unsetRegionId();
      } else {
        setRegionId((String)value);
      }
      break;

    case RESOURCE_TYPE:
      if (value == null) {
        unsetResourceType();
      } else {
        setResourceType((ResourceType)value);
      }
      break;

    case RESOURCE_ID:
      if (value == null) {
        unsetResourceId();
      } else {
        setResourceId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TAG_INDEX:
      return Integer.valueOf(getTagIndex());

    case TAG_KEY:
      return getTagKey();

    case TAG_VALUE:
      return getTagValue();

    case REGION_ID:
      return getRegionId();

    case RESOURCE_TYPE:
      return getResourceType();

    case RESOURCE_ID:
      return getResourceId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TAG_INDEX:
      return isSetTagIndex();
    case TAG_KEY:
      return isSetTagKey();
    case TAG_VALUE:
      return isSetTagValue();
    case REGION_ID:
      return isSetRegionId();
    case RESOURCE_TYPE:
      return isSetResourceType();
    case RESOURCE_ID:
      return isSetResourceId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResourceTag)
      return this.equals((ResourceTag)that);
    return false;
  }

  public boolean equals(ResourceTag that) {
    if (that == null)
      return false;

    boolean this_present_tagIndex = true && this.isSetTagIndex();
    boolean that_present_tagIndex = true && that.isSetTagIndex();
    if (this_present_tagIndex || that_present_tagIndex) {
      if (!(this_present_tagIndex && that_present_tagIndex))
        return false;
      if (this.tagIndex != that.tagIndex)
        return false;
    }

    boolean this_present_tagKey = true && this.isSetTagKey();
    boolean that_present_tagKey = true && that.isSetTagKey();
    if (this_present_tagKey || that_present_tagKey) {
      if (!(this_present_tagKey && that_present_tagKey))
        return false;
      if (!this.tagKey.equals(that.tagKey))
        return false;
    }

    boolean this_present_tagValue = true && this.isSetTagValue();
    boolean that_present_tagValue = true && that.isSetTagValue();
    if (this_present_tagValue || that_present_tagValue) {
      if (!(this_present_tagValue && that_present_tagValue))
        return false;
      if (!this.tagValue.equals(that.tagValue))
        return false;
    }

    boolean this_present_regionId = true && this.isSetRegionId();
    boolean that_present_regionId = true && that.isSetRegionId();
    if (this_present_regionId || that_present_regionId) {
      if (!(this_present_regionId && that_present_regionId))
        return false;
      if (!this.regionId.equals(that.regionId))
        return false;
    }

    boolean this_present_resourceType = true && this.isSetResourceType();
    boolean that_present_resourceType = true && that.isSetResourceType();
    if (this_present_resourceType || that_present_resourceType) {
      if (!(this_present_resourceType && that_present_resourceType))
        return false;
      if (!this.resourceType.equals(that.resourceType))
        return false;
    }

    boolean this_present_resourceId = true && this.isSetResourceId();
    boolean that_present_resourceId = true && that.isSetResourceId();
    if (this_present_resourceId || that_present_resourceId) {
      if (!(this_present_resourceId && that_present_resourceId))
        return false;
      if (!this.resourceId.equals(that.resourceId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ResourceTag other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTagIndex()).compareTo(other.isSetTagIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIndex, other.tagIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagKey()).compareTo(other.isSetTagKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagKey, other.tagKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagValue()).compareTo(other.isSetTagValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagValue, other.tagValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionId()).compareTo(other.isSetRegionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionId, other.regionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceType()).compareTo(other.isSetResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceType, other.resourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResourceTag(");
    boolean first = true;

    if (isSetTagIndex()) {
      sb.append("tagIndex:");
      sb.append(this.tagIndex);
      first = false;
    }
    if (isSetTagKey()) {
      if (!first) sb.append(", ");
      sb.append("tagKey:");
      if (this.tagKey == null) {
        sb.append("null");
      } else {
        sb.append(this.tagKey);
      }
      first = false;
    }
    if (isSetTagValue()) {
      if (!first) sb.append(", ");
      sb.append("tagValue:");
      if (this.tagValue == null) {
        sb.append("null");
      } else {
        sb.append(this.tagValue);
      }
      first = false;
    }
    if (isSetRegionId()) {
      if (!first) sb.append(", ");
      sb.append("regionId:");
      if (this.regionId == null) {
        sb.append("null");
      } else {
        sb.append(this.regionId);
      }
      first = false;
    }
    if (isSetResourceType()) {
      if (!first) sb.append(", ");
      sb.append("resourceType:");
      if (this.resourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceType);
      }
      first = false;
    }
    if (isSetResourceId()) {
      if (!first) sb.append(", ");
      sb.append("resourceId:");
      if (this.resourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourceTagStandardSchemeFactory implements SchemeFactory {
    public ResourceTagStandardScheme getScheme() {
      return new ResourceTagStandardScheme();
    }
  }

  private static class ResourceTagStandardScheme extends StandardScheme<ResourceTag> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceTag struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TAG_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tagIndex = iprot.readI32();
              struct.setTagIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagKey = iprot.readString();
              struct.setTagKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TAG_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagValue = iprot.readString();
              struct.setTagValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionId = iprot.readString();
              struct.setRegionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resourceType = ResourceType.findByValue(iprot.readI32());
              struct.setResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceId = iprot.readString();
              struct.setResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceTag struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTagIndex()) {
        oprot.writeFieldBegin(TAG_INDEX_FIELD_DESC);
        oprot.writeI32(struct.tagIndex);
        oprot.writeFieldEnd();
      }
      if (struct.tagKey != null) {
        if (struct.isSetTagKey()) {
          oprot.writeFieldBegin(TAG_KEY_FIELD_DESC);
          oprot.writeString(struct.tagKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tagValue != null) {
        if (struct.isSetTagValue()) {
          oprot.writeFieldBegin(TAG_VALUE_FIELD_DESC);
          oprot.writeString(struct.tagValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.regionId != null) {
        if (struct.isSetRegionId()) {
          oprot.writeFieldBegin(REGION_ID_FIELD_DESC);
          oprot.writeString(struct.regionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceType != null) {
        if (struct.isSetResourceType()) {
          oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.resourceType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceId != null) {
        if (struct.isSetResourceId()) {
          oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.resourceId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourceTagTupleSchemeFactory implements SchemeFactory {
    public ResourceTagTupleScheme getScheme() {
      return new ResourceTagTupleScheme();
    }
  }

  private static class ResourceTagTupleScheme extends TupleScheme<ResourceTag> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResourceTag struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTagIndex()) {
        optionals.set(0);
      }
      if (struct.isSetTagKey()) {
        optionals.set(1);
      }
      if (struct.isSetTagValue()) {
        optionals.set(2);
      }
      if (struct.isSetRegionId()) {
        optionals.set(3);
      }
      if (struct.isSetResourceType()) {
        optionals.set(4);
      }
      if (struct.isSetResourceId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTagIndex()) {
        oprot.writeI32(struct.tagIndex);
      }
      if (struct.isSetTagKey()) {
        oprot.writeString(struct.tagKey);
      }
      if (struct.isSetTagValue()) {
        oprot.writeString(struct.tagValue);
      }
      if (struct.isSetRegionId()) {
        oprot.writeString(struct.regionId);
      }
      if (struct.isSetResourceType()) {
        oprot.writeI32(struct.resourceType.getValue());
      }
      if (struct.isSetResourceId()) {
        oprot.writeString(struct.resourceId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResourceTag struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.tagIndex = iprot.readI32();
        struct.setTagIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tagKey = iprot.readString();
        struct.setTagKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tagValue = iprot.readString();
        struct.setTagValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.regionId = iprot.readString();
        struct.setRegionIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.resourceType = ResourceType.findByValue(iprot.readI32());
        struct.setResourceTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.resourceId = iprot.readString();
        struct.setResourceIdIsSet(true);
      }
    }
  }

}

