/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.mail;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MailEntity implements org.apache.thrift.TBase<MailEntity, MailEntity._Fields>, java.io.Serializable, Cloneable, Comparable<MailEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MailEntity");

  private static final org.apache.thrift.protocol.TField RECEIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("receivers", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CC_FIELD_DESC = new org.apache.thrift.protocol.TField("cc", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField BCC_FIELD_DESC = new org.apache.thrift.protocol.TField("bcc", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField ATTACHMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("attachments", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MailEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MailEntityTupleSchemeFactory());
  }

  public List<String> receivers; // required
  public List<String> cc; // optional
  public List<String> bcc; // optional
  public String subject; // required
  public MailContent content; // optional
  public List<String> attachments; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECEIVERS((short)1, "receivers"),
    CC((short)2, "cc"),
    BCC((short)3, "bcc"),
    SUBJECT((short)4, "subject"),
    CONTENT((short)5, "content"),
    ATTACHMENTS((short)6, "attachments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECEIVERS
          return RECEIVERS;
        case 2: // CC
          return CC;
        case 3: // BCC
          return BCC;
        case 4: // SUBJECT
          return SUBJECT;
        case 5: // CONTENT
          return CONTENT;
        case 6: // ATTACHMENTS
          return ATTACHMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CC,_Fields.BCC,_Fields.CONTENT,_Fields.ATTACHMENTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECEIVERS, new org.apache.thrift.meta_data.FieldMetaData("receivers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CC, new org.apache.thrift.meta_data.FieldMetaData("cc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BCC, new org.apache.thrift.meta_data.FieldMetaData("bcc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MailContent.class)));
    tmpMap.put(_Fields.ATTACHMENTS, new org.apache.thrift.meta_data.FieldMetaData("attachments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MailEntity.class, metaDataMap);
  }

  public MailEntity() {
  }

  public MailEntity(
    List<String> receivers,
    String subject)
  {
    this();
    this.receivers = receivers;
    this.subject = subject;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MailEntity(MailEntity other) {
    if (other.isSetReceivers()) {
      List<String> __this__receivers = new ArrayList<String>(other.receivers);
      this.receivers = __this__receivers;
    }
    if (other.isSetCc()) {
      List<String> __this__cc = new ArrayList<String>(other.cc);
      this.cc = __this__cc;
    }
    if (other.isSetBcc()) {
      List<String> __this__bcc = new ArrayList<String>(other.bcc);
      this.bcc = __this__bcc;
    }
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    if (other.isSetContent()) {
      this.content = new MailContent(other.content);
    }
    if (other.isSetAttachments()) {
      List<String> __this__attachments = new ArrayList<String>(other.attachments);
      this.attachments = __this__attachments;
    }
  }

  public MailEntity deepCopy() {
    return new MailEntity(this);
  }

  @Override
  public void clear() {
    this.receivers = null;
    this.cc = null;
    this.bcc = null;
    this.subject = null;
    this.content = null;
    this.attachments = null;
  }

  public int getReceiversSize() {
    return (this.receivers == null) ? 0 : this.receivers.size();
  }

  public java.util.Iterator<String> getReceiversIterator() {
    return (this.receivers == null) ? null : this.receivers.iterator();
  }

  public void addToReceivers(String elem) {
    if (this.receivers == null) {
      this.receivers = new ArrayList<String>();
    }
    this.receivers.add(elem);
  }

  public List<String> getReceivers() {
    return this.receivers;
  }

  public MailEntity setReceivers(List<String> receivers) {
    this.receivers = receivers;
    return this;
  }

  public void unsetReceivers() {
    this.receivers = null;
  }

  /** Returns true if field receivers is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivers() {
    return this.receivers != null;
  }

  public void setReceiversIsSet(boolean value) {
    if (!value) {
      this.receivers = null;
    }
  }

  public int getCcSize() {
    return (this.cc == null) ? 0 : this.cc.size();
  }

  public java.util.Iterator<String> getCcIterator() {
    return (this.cc == null) ? null : this.cc.iterator();
  }

  public void addToCc(String elem) {
    if (this.cc == null) {
      this.cc = new ArrayList<String>();
    }
    this.cc.add(elem);
  }

  public List<String> getCc() {
    return this.cc;
  }

  public MailEntity setCc(List<String> cc) {
    this.cc = cc;
    return this;
  }

  public void unsetCc() {
    this.cc = null;
  }

  /** Returns true if field cc is set (has been assigned a value) and false otherwise */
  public boolean isSetCc() {
    return this.cc != null;
  }

  public void setCcIsSet(boolean value) {
    if (!value) {
      this.cc = null;
    }
  }

  public int getBccSize() {
    return (this.bcc == null) ? 0 : this.bcc.size();
  }

  public java.util.Iterator<String> getBccIterator() {
    return (this.bcc == null) ? null : this.bcc.iterator();
  }

  public void addToBcc(String elem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<String>();
    }
    this.bcc.add(elem);
  }

  public List<String> getBcc() {
    return this.bcc;
  }

  public MailEntity setBcc(List<String> bcc) {
    this.bcc = bcc;
    return this;
  }

  public void unsetBcc() {
    this.bcc = null;
  }

  /** Returns true if field bcc is set (has been assigned a value) and false otherwise */
  public boolean isSetBcc() {
    return this.bcc != null;
  }

  public void setBccIsSet(boolean value) {
    if (!value) {
      this.bcc = null;
    }
  }

  public String getSubject() {
    return this.subject;
  }

  public MailEntity setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public MailContent getContent() {
    return this.content;
  }

  public MailEntity setContent(MailContent content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getAttachmentsSize() {
    return (this.attachments == null) ? 0 : this.attachments.size();
  }

  public java.util.Iterator<String> getAttachmentsIterator() {
    return (this.attachments == null) ? null : this.attachments.iterator();
  }

  public void addToAttachments(String elem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<String>();
    }
    this.attachments.add(elem);
  }

  public List<String> getAttachments() {
    return this.attachments;
  }

  public MailEntity setAttachments(List<String> attachments) {
    this.attachments = attachments;
    return this;
  }

  public void unsetAttachments() {
    this.attachments = null;
  }

  /** Returns true if field attachments is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachments() {
    return this.attachments != null;
  }

  public void setAttachmentsIsSet(boolean value) {
    if (!value) {
      this.attachments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECEIVERS:
      if (value == null) {
        unsetReceivers();
      } else {
        setReceivers((List<String>)value);
      }
      break;

    case CC:
      if (value == null) {
        unsetCc();
      } else {
        setCc((List<String>)value);
      }
      break;

    case BCC:
      if (value == null) {
        unsetBcc();
      } else {
        setBcc((List<String>)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((MailContent)value);
      }
      break;

    case ATTACHMENTS:
      if (value == null) {
        unsetAttachments();
      } else {
        setAttachments((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECEIVERS:
      return getReceivers();

    case CC:
      return getCc();

    case BCC:
      return getBcc();

    case SUBJECT:
      return getSubject();

    case CONTENT:
      return getContent();

    case ATTACHMENTS:
      return getAttachments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECEIVERS:
      return isSetReceivers();
    case CC:
      return isSetCc();
    case BCC:
      return isSetBcc();
    case SUBJECT:
      return isSetSubject();
    case CONTENT:
      return isSetContent();
    case ATTACHMENTS:
      return isSetAttachments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MailEntity)
      return this.equals((MailEntity)that);
    return false;
  }

  public boolean equals(MailEntity that) {
    if (that == null)
      return false;

    boolean this_present_receivers = true && this.isSetReceivers();
    boolean that_present_receivers = true && that.isSetReceivers();
    if (this_present_receivers || that_present_receivers) {
      if (!(this_present_receivers && that_present_receivers))
        return false;
      if (!this.receivers.equals(that.receivers))
        return false;
    }

    boolean this_present_cc = true && this.isSetCc();
    boolean that_present_cc = true && that.isSetCc();
    if (this_present_cc || that_present_cc) {
      if (!(this_present_cc && that_present_cc))
        return false;
      if (!this.cc.equals(that.cc))
        return false;
    }

    boolean this_present_bcc = true && this.isSetBcc();
    boolean that_present_bcc = true && that.isSetBcc();
    if (this_present_bcc || that_present_bcc) {
      if (!(this_present_bcc && that_present_bcc))
        return false;
      if (!this.bcc.equals(that.bcc))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_attachments = true && this.isSetAttachments();
    boolean that_present_attachments = true && that.isSetAttachments();
    if (this_present_attachments || that_present_attachments) {
      if (!(this_present_attachments && that_present_attachments))
        return false;
      if (!this.attachments.equals(that.attachments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MailEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReceivers()).compareTo(other.isSetReceivers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivers, other.receivers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCc()).compareTo(other.isSetCc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cc, other.cc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBcc()).compareTo(other.isSetBcc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBcc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bcc, other.bcc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachments()).compareTo(other.isSetAttachments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachments, other.attachments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MailEntity(");
    boolean first = true;

    sb.append("receivers:");
    if (this.receivers == null) {
      sb.append("null");
    } else {
      sb.append(this.receivers);
    }
    first = false;
    if (isSetCc()) {
      if (!first) sb.append(", ");
      sb.append("cc:");
      if (this.cc == null) {
        sb.append("null");
      } else {
        sb.append(this.cc);
      }
      first = false;
    }
    if (isSetBcc()) {
      if (!first) sb.append(", ");
      sb.append("bcc:");
      if (this.bcc == null) {
        sb.append("null");
      } else {
        sb.append(this.bcc);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("subject:");
    if (this.subject == null) {
      sb.append("null");
    } else {
      sb.append(this.subject);
    }
    first = false;
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetAttachments()) {
      if (!first) sb.append(", ");
      sb.append("attachments:");
      if (this.attachments == null) {
        sb.append("null");
      } else {
        sb.append(this.attachments);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (receivers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'receivers' was not present! Struct: " + toString());
    }
    if (subject == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subject' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (content != null) {
      content.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MailEntityStandardSchemeFactory implements SchemeFactory {
    public MailEntityStandardScheme getScheme() {
      return new MailEntityStandardScheme();
    }
  }

  private static class MailEntityStandardScheme extends StandardScheme<MailEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MailEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECEIVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.receivers = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.receivers.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setReceiversIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.cc = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5;
                  _elem5 = iprot.readString();
                  struct.cc.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setCcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BCC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.bcc = new ArrayList<String>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  String _elem8;
                  _elem8 = iprot.readString();
                  struct.bcc.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setBccIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.content = new MailContent();
              struct.content.read(iprot);
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ATTACHMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.attachments = new ArrayList<String>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  String _elem11;
                  _elem11 = iprot.readString();
                  struct.attachments.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setAttachmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MailEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.receivers != null) {
        oprot.writeFieldBegin(RECEIVERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.receivers.size()));
          for (String _iter12 : struct.receivers)
          {
            oprot.writeString(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cc != null) {
        if (struct.isSetCc()) {
          oprot.writeFieldBegin(CC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cc.size()));
            for (String _iter13 : struct.cc)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bcc != null) {
        if (struct.isSetBcc()) {
          oprot.writeFieldBegin(BCC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.bcc.size()));
            for (String _iter14 : struct.bcc)
            {
              oprot.writeString(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.subject != null) {
        oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
        oprot.writeString(struct.subject);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          struct.content.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attachments != null) {
        if (struct.isSetAttachments()) {
          oprot.writeFieldBegin(ATTACHMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.attachments.size()));
            for (String _iter15 : struct.attachments)
            {
              oprot.writeString(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MailEntityTupleSchemeFactory implements SchemeFactory {
    public MailEntityTupleScheme getScheme() {
      return new MailEntityTupleScheme();
    }
  }

  private static class MailEntityTupleScheme extends TupleScheme<MailEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MailEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.receivers.size());
        for (String _iter16 : struct.receivers)
        {
          oprot.writeString(_iter16);
        }
      }
      oprot.writeString(struct.subject);
      BitSet optionals = new BitSet();
      if (struct.isSetCc()) {
        optionals.set(0);
      }
      if (struct.isSetBcc()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetAttachments()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCc()) {
        {
          oprot.writeI32(struct.cc.size());
          for (String _iter17 : struct.cc)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetBcc()) {
        {
          oprot.writeI32(struct.bcc.size());
          for (String _iter18 : struct.bcc)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetContent()) {
        struct.content.write(oprot);
      }
      if (struct.isSetAttachments()) {
        {
          oprot.writeI32(struct.attachments.size());
          for (String _iter19 : struct.attachments)
          {
            oprot.writeString(_iter19);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MailEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.receivers = new ArrayList<String>(_list20.size);
        for (int _i21 = 0; _i21 < _list20.size; ++_i21)
        {
          String _elem22;
          _elem22 = iprot.readString();
          struct.receivers.add(_elem22);
        }
      }
      struct.setReceiversIsSet(true);
      struct.subject = iprot.readString();
      struct.setSubjectIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.cc = new ArrayList<String>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            String _elem25;
            _elem25 = iprot.readString();
            struct.cc.add(_elem25);
          }
        }
        struct.setCcIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.bcc = new ArrayList<String>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            String _elem28;
            _elem28 = iprot.readString();
            struct.bcc.add(_elem28);
          }
        }
        struct.setBccIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = new MailContent();
        struct.content.read(iprot);
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.attachments = new ArrayList<String>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            String _elem31;
            _elem31 = iprot.readString();
            struct.attachments.add(_elem31);
          }
        }
        struct.setAttachmentsIsSet(true);
      }
    }
  }

}

