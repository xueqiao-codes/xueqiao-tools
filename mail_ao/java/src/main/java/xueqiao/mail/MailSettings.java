/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.mail;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MailSettings implements org.apache.thrift.TBase<MailSettings, MailSettings._Fields>, java.io.Serializable, Cloneable, Comparable<MailSettings> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MailSettings");

  private static final org.apache.thrift.protocol.TField SMTP_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("smtpHost", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sender", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SENDER_ALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("senderAlias", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MailSettingsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MailSettingsTupleSchemeFactory());
  }

  public String smtpHost; // required
  public String sender; // required
  public String passwd; // required
  public String senderAlias; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SMTP_HOST((short)1, "smtpHost"),
    SENDER((short)2, "sender"),
    PASSWD((short)3, "passwd"),
    SENDER_ALIAS((short)4, "senderAlias");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SMTP_HOST
          return SMTP_HOST;
        case 2: // SENDER
          return SENDER;
        case 3: // PASSWD
          return PASSWD;
        case 4: // SENDER_ALIAS
          return SENDER_ALIAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SENDER_ALIAS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SMTP_HOST, new org.apache.thrift.meta_data.FieldMetaData("smtpHost", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDER, new org.apache.thrift.meta_data.FieldMetaData("sender", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDER_ALIAS, new org.apache.thrift.meta_data.FieldMetaData("senderAlias", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MailSettings.class, metaDataMap);
  }

  public MailSettings() {
  }

  public MailSettings(
    String smtpHost,
    String sender,
    String passwd)
  {
    this();
    this.smtpHost = smtpHost;
    this.sender = sender;
    this.passwd = passwd;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MailSettings(MailSettings other) {
    if (other.isSetSmtpHost()) {
      this.smtpHost = other.smtpHost;
    }
    if (other.isSetSender()) {
      this.sender = other.sender;
    }
    if (other.isSetPasswd()) {
      this.passwd = other.passwd;
    }
    if (other.isSetSenderAlias()) {
      this.senderAlias = other.senderAlias;
    }
  }

  public MailSettings deepCopy() {
    return new MailSettings(this);
  }

  @Override
  public void clear() {
    this.smtpHost = null;
    this.sender = null;
    this.passwd = null;
    this.senderAlias = null;
  }

  public String getSmtpHost() {
    return this.smtpHost;
  }

  public MailSettings setSmtpHost(String smtpHost) {
    this.smtpHost = smtpHost;
    return this;
  }

  public void unsetSmtpHost() {
    this.smtpHost = null;
  }

  /** Returns true if field smtpHost is set (has been assigned a value) and false otherwise */
  public boolean isSetSmtpHost() {
    return this.smtpHost != null;
  }

  public void setSmtpHostIsSet(boolean value) {
    if (!value) {
      this.smtpHost = null;
    }
  }

  public String getSender() {
    return this.sender;
  }

  public MailSettings setSender(String sender) {
    this.sender = sender;
    return this;
  }

  public void unsetSender() {
    this.sender = null;
  }

  /** Returns true if field sender is set (has been assigned a value) and false otherwise */
  public boolean isSetSender() {
    return this.sender != null;
  }

  public void setSenderIsSet(boolean value) {
    if (!value) {
      this.sender = null;
    }
  }

  public String getPasswd() {
    return this.passwd;
  }

  public MailSettings setPasswd(String passwd) {
    this.passwd = passwd;
    return this;
  }

  public void unsetPasswd() {
    this.passwd = null;
  }

  /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswd() {
    return this.passwd != null;
  }

  public void setPasswdIsSet(boolean value) {
    if (!value) {
      this.passwd = null;
    }
  }

  public String getSenderAlias() {
    return this.senderAlias;
  }

  public MailSettings setSenderAlias(String senderAlias) {
    this.senderAlias = senderAlias;
    return this;
  }

  public void unsetSenderAlias() {
    this.senderAlias = null;
  }

  /** Returns true if field senderAlias is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderAlias() {
    return this.senderAlias != null;
  }

  public void setSenderAliasIsSet(boolean value) {
    if (!value) {
      this.senderAlias = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SMTP_HOST:
      if (value == null) {
        unsetSmtpHost();
      } else {
        setSmtpHost((String)value);
      }
      break;

    case SENDER:
      if (value == null) {
        unsetSender();
      } else {
        setSender((String)value);
      }
      break;

    case PASSWD:
      if (value == null) {
        unsetPasswd();
      } else {
        setPasswd((String)value);
      }
      break;

    case SENDER_ALIAS:
      if (value == null) {
        unsetSenderAlias();
      } else {
        setSenderAlias((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SMTP_HOST:
      return getSmtpHost();

    case SENDER:
      return getSender();

    case PASSWD:
      return getPasswd();

    case SENDER_ALIAS:
      return getSenderAlias();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SMTP_HOST:
      return isSetSmtpHost();
    case SENDER:
      return isSetSender();
    case PASSWD:
      return isSetPasswd();
    case SENDER_ALIAS:
      return isSetSenderAlias();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MailSettings)
      return this.equals((MailSettings)that);
    return false;
  }

  public boolean equals(MailSettings that) {
    if (that == null)
      return false;

    boolean this_present_smtpHost = true && this.isSetSmtpHost();
    boolean that_present_smtpHost = true && that.isSetSmtpHost();
    if (this_present_smtpHost || that_present_smtpHost) {
      if (!(this_present_smtpHost && that_present_smtpHost))
        return false;
      if (!this.smtpHost.equals(that.smtpHost))
        return false;
    }

    boolean this_present_sender = true && this.isSetSender();
    boolean that_present_sender = true && that.isSetSender();
    if (this_present_sender || that_present_sender) {
      if (!(this_present_sender && that_present_sender))
        return false;
      if (!this.sender.equals(that.sender))
        return false;
    }

    boolean this_present_passwd = true && this.isSetPasswd();
    boolean that_present_passwd = true && that.isSetPasswd();
    if (this_present_passwd || that_present_passwd) {
      if (!(this_present_passwd && that_present_passwd))
        return false;
      if (!this.passwd.equals(that.passwd))
        return false;
    }

    boolean this_present_senderAlias = true && this.isSetSenderAlias();
    boolean that_present_senderAlias = true && that.isSetSenderAlias();
    if (this_present_senderAlias || that_present_senderAlias) {
      if (!(this_present_senderAlias && that_present_senderAlias))
        return false;
      if (!this.senderAlias.equals(that.senderAlias))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MailSettings other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSmtpHost()).compareTo(other.isSetSmtpHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmtpHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smtpHost, other.smtpHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSender()).compareTo(other.isSetSender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender, other.sender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPasswd()).compareTo(other.isSetPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderAlias()).compareTo(other.isSetSenderAlias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderAlias()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderAlias, other.senderAlias);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MailSettings(");
    boolean first = true;

    sb.append("smtpHost:");
    if (this.smtpHost == null) {
      sb.append("null");
    } else {
      sb.append(this.smtpHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sender:");
    if (this.sender == null) {
      sb.append("null");
    } else {
      sb.append(this.sender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passwd:");
    if (this.passwd == null) {
      sb.append("null");
    } else {
      sb.append(this.passwd);
    }
    first = false;
    if (isSetSenderAlias()) {
      if (!first) sb.append(", ");
      sb.append("senderAlias:");
      if (this.senderAlias == null) {
        sb.append("null");
      } else {
        sb.append(this.senderAlias);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (smtpHost == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'smtpHost' was not present! Struct: " + toString());
    }
    if (sender == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sender' was not present! Struct: " + toString());
    }
    if (passwd == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passwd' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MailSettingsStandardSchemeFactory implements SchemeFactory {
    public MailSettingsStandardScheme getScheme() {
      return new MailSettingsStandardScheme();
    }
  }

  private static class MailSettingsStandardScheme extends StandardScheme<MailSettings> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MailSettings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SMTP_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smtpHost = iprot.readString();
              struct.setSmtpHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sender = iprot.readString();
              struct.setSenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwd = iprot.readString();
              struct.setPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SENDER_ALIAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.senderAlias = iprot.readString();
              struct.setSenderAliasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MailSettings struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.smtpHost != null) {
        oprot.writeFieldBegin(SMTP_HOST_FIELD_DESC);
        oprot.writeString(struct.smtpHost);
        oprot.writeFieldEnd();
      }
      if (struct.sender != null) {
        oprot.writeFieldBegin(SENDER_FIELD_DESC);
        oprot.writeString(struct.sender);
        oprot.writeFieldEnd();
      }
      if (struct.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(struct.passwd);
        oprot.writeFieldEnd();
      }
      if (struct.senderAlias != null) {
        if (struct.isSetSenderAlias()) {
          oprot.writeFieldBegin(SENDER_ALIAS_FIELD_DESC);
          oprot.writeString(struct.senderAlias);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MailSettingsTupleSchemeFactory implements SchemeFactory {
    public MailSettingsTupleScheme getScheme() {
      return new MailSettingsTupleScheme();
    }
  }

  private static class MailSettingsTupleScheme extends TupleScheme<MailSettings> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MailSettings struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.smtpHost);
      oprot.writeString(struct.sender);
      oprot.writeString(struct.passwd);
      BitSet optionals = new BitSet();
      if (struct.isSetSenderAlias()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSenderAlias()) {
        oprot.writeString(struct.senderAlias);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MailSettings struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.smtpHost = iprot.readString();
      struct.setSmtpHostIsSet(true);
      struct.sender = iprot.readString();
      struct.setSenderIsSet(true);
      struct.passwd = iprot.readString();
      struct.setPasswdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.senderAlias = iprot.readString();
        struct.setSenderAliasIsSet(true);
      }
    }
  }

}

