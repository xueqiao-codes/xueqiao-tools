#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ContentType:
  TEXT = 0
  HTML = 1

  _VALUES_TO_NAMES = {
    0: "TEXT",
    1: "HTML",
  }

  _NAMES_TO_VALUES = {
    "TEXT": 0,
    "HTML": 1,
  }


class MailSettings:
  """
  Attributes:
   - smtpHost
   - sender
   - passwd
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'smtpHost', None, None, ), # 1
    (2, TType.STRING, 'sender', None, None, ), # 2
    (3, TType.STRING, 'passwd', None, None, ), # 3
  )

  def __init__(self, smtpHost=None, sender=None, passwd=None,):
    self.smtpHost = smtpHost
    self.sender = sender
    self.passwd = passwd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.smtpHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sender = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.passwd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MailSettings')
    if self.smtpHost is not None:
      oprot.writeFieldBegin('smtpHost', TType.STRING, 1)
      oprot.writeString(self.smtpHost)
      oprot.writeFieldEnd()
    if self.sender is not None:
      oprot.writeFieldBegin('sender', TType.STRING, 2)
      oprot.writeString(self.sender)
      oprot.writeFieldEnd()
    if self.passwd is not None:
      oprot.writeFieldBegin('passwd', TType.STRING, 3)
      oprot.writeString(self.passwd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.smtpHost is None:
      raise TProtocol.TProtocolException(message='Required field smtpHost is unset!')
    if self.sender is None:
      raise TProtocol.TProtocolException(message='Required field sender is unset!')
    if self.passwd is None:
      raise TProtocol.TProtocolException(message='Required field passwd is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MailContent:
  """
  Attributes:
   - contentType
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'contentType', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
  )

  def __init__(self, contentType=None, content=None,):
    self.contentType = contentType
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.contentType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MailContent')
    if self.contentType is not None:
      oprot.writeFieldBegin('contentType', TType.I32, 1)
      oprot.writeI32(self.contentType)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.contentType is None:
      raise TProtocol.TProtocolException(message='Required field contentType is unset!')
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MailEntity:
  """
  Attributes:
   - receivers
   - cc
   - bcc
   - subject
   - content
   - attachments
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'receivers', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'cc', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'bcc', (TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'subject', None, None, ), # 4
    (5, TType.STRUCT, 'content', (MailContent, MailContent.thrift_spec), None, ), # 5
    (6, TType.LIST, 'attachments', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, receivers=None, cc=None, bcc=None, subject=None, content=None, attachments=None,):
    self.receivers = receivers
    self.cc = cc
    self.bcc = bcc
    self.subject = subject
    self.content = content
    self.attachments = attachments

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.receivers = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.receivers.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cc = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.cc.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.bcc = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.bcc.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.subject = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.content = MailContent()
          self.content.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.attachments = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readString();
            self.attachments.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MailEntity')
    if self.receivers is not None:
      oprot.writeFieldBegin('receivers', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.receivers))
      for iter24 in self.receivers:
        oprot.writeString(iter24)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cc is not None:
      oprot.writeFieldBegin('cc', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.cc))
      for iter25 in self.cc:
        oprot.writeString(iter25)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bcc is not None:
      oprot.writeFieldBegin('bcc', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.bcc))
      for iter26 in self.bcc:
        oprot.writeString(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.subject is not None:
      oprot.writeFieldBegin('subject', TType.STRING, 4)
      oprot.writeString(self.subject)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRUCT, 5)
      self.content.write(oprot)
      oprot.writeFieldEnd()
    if self.attachments is not None:
      oprot.writeFieldBegin('attachments', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.attachments))
      for iter27 in self.attachments:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.receivers is None:
      raise TProtocol.TProtocolException(message='Required field receivers is unset!')
    if self.subject is None:
      raise TProtocol.TProtocolException(message='Required field subject is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
